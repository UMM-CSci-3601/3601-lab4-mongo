// Server side build.gradle
// Builds the server side of the project

plugins {
  // Apply the application plugin to add support for building a CLI application
  id 'application'

  // Apply the checkstyle plugin to check for appropriate Java code style.
  id 'checkstyle'

  // Apply the Jacoco plugin to add suppport for JUnit test coverage reports.
  id 'jacoco'
}

// Build and run the project with Java 11
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

// In this section you declare where to find the dependencies of your project
repositories {
  // Use Maven Central for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()
}

// External dependencies that our application utilizes
dependencies {
  // Javalin, a simple web framework for Java
  implementation 'io.javalin:javalin:5.3.2'

  // Mongo DB Driver for Java
  implementation 'org.mongodb:mongodb-driver-sync:4.8.2'

  // Jackson, a JSON library for Java
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'

  // MongoJack, MongoDB integration for Jackson
  implementation 'org.mongojack:mongojack:4.8.0'

  // Jackson support modules for Java 8 datatypes
  implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.14.2'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.2'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'

  // Simple Logging Facade for Java
  implementation 'org.slf4j:slf4j-simple:2.0.6'

  // JUnit Jupiter API for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'

  // JUnit Jupiter Engine for testing.
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

  // Mockito for testing
  testImplementation 'org.mockito:mockito-core:5.1.1'

  testImplementation 'com.mockrunner:mockrunner-servlet:2.0.6'

  // The Mockito Java mocking library
  testImplementation "org.mockito:mockito-core:3.+"
}

application {
  // Define the main class for the application
  mainClass = 'umm3601.Server'
}

test {
  // Use junit platform for unit tests
  useJUnitPlatform()

  // After running the tests, generate a coverage report
  finalizedBy jacocoTestReport
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

jacocoTestReport {
  // Running the test report task automatically runs test first
  dependsOn test

  reports {
    // This isn't strictly necessary, but the default reports
    // location is buried pretty deep in the build directory,
    // so this makes it easier to find.
    html.destination file("${buildDir}/jacocoHtml")
  }

  afterEvaluate {
    // This excludes the `Server` class from the coverage report. We don't
    // have any good way to test the `Server` class directory (we'd have
    // to somehow fake incoming HTTP requests), so we are just
    // leaving it out of the coverage report and the coverage limits.
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: 'umm3601/Server.class')
    }))
  }
}

tasks.withType(JavaCompile) {
  // All of our source files are written in UTF-8
  options.encoding = 'UTF-8'
}
